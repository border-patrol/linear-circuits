Example Idealised
Example0.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
4 [label="(1, 1) CHAN_IN : logic"];
5 [label="(1, 1) CHAN_OUT : logic"];
3 [label="OUT(1) OUTPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="IN(1) INPUT : logic"];
6 [label="(2, 1) and"];
7 [label="(1, 1) NOT"];
	4 -> 5;
	6 -> 4;
	1 -> 6;
	2 -> 6;
	7 -> 3;
	5 -> 7;
}

// LOG : BYE
Example1.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
Example1.sv:8:0-0: Dangling Ports:

o : TyPort(output,logic)
i : TyPort(input,logic)

Example2.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
31 [label="(1, 1) CHAN_IN : logic"];
32 [label="(1, 1) CHAN_OUT : logic"];
29 [label="(1, 1) CHAN_IN : logic"];
30 [label="(1, 1) CHAN_OUT : logic"];
26 [label="(1, 1) CHAN_IN : logic"];
27 [label="(1, 1) CHAN_OUT : logic"];
24 [label="(1, 1) CHAN_IN : logic"];
25 [label="(1, 1) CHAN_OUT : logic"];
20 [label="(1, 1) CHAN_IN : logic"];
21 [label="(1, 1) CHAN_OUT : logic"];
18 [label="(1, 1) CHAN_IN : logic"];
19 [label="(1, 1) CHAN_OUT : logic"];
16 [label="(1, 1) CHAN_IN : logic"];
17 [label="(1, 1) CHAN_OUT : logic"];
12 [label="(1, 1) CHAN_IN : logic"];
13 [label="(1, 1) CHAN_OUT : logic"];
10 [label="(1, 1) CHAN_IN : logic"];
11 [label="(1, 1) CHAN_OUT : logic"];
8 [label="(1, 1) CHAN_IN : logic"];
9 [label="(1, 1) CHAN_OUT : logic"];
6 [label="(1, 1) CHAN_IN : logic"];
7 [label="(1, 1) CHAN_OUT : logic"];
5 [label="OUT(1) OUTPUT : logic"];
4 [label="OUT(1) OUTPUT : logic"];
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="IN(1) INPUT : logic"];
14 [label="(1, 2) DUP"];
15 [label="(1, 2) DUP"];
22 [label="(1, 2) DUP"];
23 [label="(2, 1) xor"];
28 [label="(1, 2) DUP"];
33 [label="(2, 1) and"];
34 [label="(2, 1) and"];
35 [label="(2, 1) xor"];
36 [label="(2, 1) or"];
	31 -> 32;
	29 -> 30;
	26 -> 27;
	24 -> 25;
	20 -> 21;
	18 -> 19;
	16 -> 17;
	12 -> 13;
	10 -> 11;
	8 -> 9;
	6 -> 7;
	1 -> 14;
	14 -> 6;
	14 -> 8;
	2 -> 15;
	15 -> 10;
	15 -> 12;
	17 -> 22;
	22 -> 18;
	22 -> 20;
	23 -> 16;
	9 -> 23;
	13 -> 23;
	3 -> 28;
	28 -> 24;
	28 -> 26;
	33 -> 29;
	19 -> 33;
	25 -> 33;
	34 -> 31;
	7 -> 34;
	11 -> 34;
	35 -> 5;
	27 -> 35;
	21 -> 35;
	36 -> 4;
	30 -> 36;
	32 -> 36;
}

// LOG : BYE
Example3.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
8 [label="(1, 1) CHAN_IN : logic"];
9 [label="(1, 1) CHAN_OUT : logic"];
5 [label="(1, 1) CHAN_IN : logic[1]"];
6 [label="(1, 1) CHAN_OUT : logic[1]"];
3 [label="(1, 1) CHAN_IN : logic"];
4 [label="(1, 1) CHAN_OUT : logic"];
2 [label="OUT(1) OUTPUT : logic"];
1 [label="IN(1) INPUT : logic[2]"];
7 [label="(1, 2) IDX_EDGE"];
10 [label="(1, 1) IDX_SINGLETON"];
11 [label="(2, 1) and"];
	8 -> 9;
	5 -> 6;
	3 -> 4;
	1 -> 7;
	7 -> 3;
	7 -> 5;
	10 -> 8;
	6 -> 10;
	11 -> 2;
	4 -> 11;
	9 -> 11;
}

// LOG : BYE
Example4.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
17 [label="(1, 1) CHAN_IN : logic[1]"];
18 [label="(1, 1) CHAN_OUT : logic[1]"];
15 [label="(1, 1) CHAN_IN : logic[1]"];
16 [label="(1, 1) CHAN_OUT : logic[1]"];
12 [label="(1, 1) CHAN_IN : logic[3]"];
13 [label="(1, 1) CHAN_OUT : logic[3]"];
10 [label="(1, 1) CHAN_IN : logic"];
11 [label="(1, 1) CHAN_OUT : logic"];
8 [label="(1, 1) CHAN_IN : logic"];
9 [label="(1, 1) CHAN_OUT : logic"];
6 [label="(1, 1) CHAN_IN : logic"];
7 [label="(1, 1) CHAN_OUT : logic"];
4 [label="(1, 1) CHAN_IN : logic"];
5 [label="(1, 1) CHAN_OUT : logic"];
3 [label="OUT(1) OUTPUT : logic"];
2 [label="OUT(1) OUTPUT : logic"];
1 [label="IN(1) INPUT : logic[4]"];
14 [label="(1, 2) IDX_EDGE"];
19 [label="(1, 3) IDX_SPLIT"];
20 [label="(1, 1) IDX_SINGLETON"];
21 [label="(1, 1) IDX_SINGLETON"];
22 [label="(2, 1) and"];
23 [label="(2, 1) and"];
	17 -> 18;
	15 -> 16;
	12 -> 13;
	10 -> 11;
	8 -> 9;
	6 -> 7;
	4 -> 5;
	1 -> 14;
	14 -> 4;
	14 -> 12;
	13 -> 19;
	19 -> 8;
	19 -> 15;
	19 -> 17;
	20 -> 6;
	16 -> 20;
	21 -> 10;
	18 -> 21;
	22 -> 2;
	5 -> 22;
	7 -> 22;
	23 -> 3;
	9 -> 23;
	11 -> 23;
}

// LOG : BYE
Example5.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
Example5.sv:6:0-0: Dangling Ports:

de : TyPort(output,logic[2])
c : TyPort(output,logic)
ab : TyPort(output,logic[2])
abcde : TyPort(input,logic[5])

Example6.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
4 [label="OUT(1) OUTPUT : logic[2]"];
3 [label="OUT(1) OUTPUT : logic"];
2 [label="OUT(1) OUTPUT : logic[2]"];
1 [label="IN(1) INPUT : logic[5]"];
5 [label="(1, 3) IDX_SPLIT"];
	1 -> 5;
	5 -> 3;
	5 -> 2;
	5 -> 4;
}

// LOG : BYE
Example7.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
4 [label="IN(1) INPUT : logic"];
3 [label="OUT(1) OUTPUT : logic[1]"];
2 [label="OUT(1) OUTPUT : logic"];
1 [label="IN(1) INPUT : logic[1]"];
5 [label="(1, 1) IDX_SINGLETON"];
6 [label="(1, 1) MERGE_SINGLETON"];
	5 -> 2;
	1 -> 5;
	6 -> 3;
	4 -> 6;
}

// LOG : BYE
Example8.sv
// LOG : Starting Idealised Linear
// LOG : Parsing Successful
// LOG : Type Checking Complete
// LOG : Soundness Check Complete
digraph G {
3 [label="OUT(1) OUTPUT : logic[2]"];
2 [label="IN(1) INPUT : logic"];
1 [label="IN(1) INPUT : logic"];
4 [label="(2, 1) MERGE_2L2V"];
	4 -> 3;
	1 -> 4;
	2 -> 4;
}

// LOG : BYE
