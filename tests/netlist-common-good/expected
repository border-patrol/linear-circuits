Example NetList-Common Dump
Example1.sv
// LOG : Starting NetList 
digraph G {
8 [label="(1, 1) CHAN_IN : logic"];
9 [label="(1, 1) CHAN_OUT : logic"];
6 [label="(1, 1) CHAN_IN : logic"];
7 [label="(1, 1) CHAN_OUT : logic"];
5 [label="IN(1) INPUT : logic"];
4 [label="IN(1) INPUT : logic"];
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
10 [label="(2, 1) and"];
11 [label="(2, 1) or"];
12 [label="(2, 1) xor"];
	8 -> 9;
	6 -> 7;
	2 -> 10;
	3 -> 10;
	10 -> 6;
	4 -> 11;
	5 -> 11;
	11 -> 8;
	7 -> 12;
	9 -> 12;
	12 -> 1;
}

Example2.sv
// LOG : Starting NetList 
// LOG : Failure Interpreting
digraph G {
18 [label="(1, 1) CHAN_IN : logic"];
19 [label="(1, 1) CHAN_OUT : logic"];
16 [label="(1, 1) CHAN_IN : logic"];
17 [label="(1, 1) CHAN_OUT : logic"];
14 [label="(1, 1) CHAN_IN : logic"];
15 [label="(1, 1) CHAN_OUT : logic"];
12 [label="(1, 1) CHAN_IN : logic"];
13 [label="(1, 1) CHAN_OUT : logic"];
10 [label="(1, 1) CHAN_IN : logic"];
11 [label="(1, 1) CHAN_OUT : logic"];
8 [label="(1, 1) CHAN_IN : logic"];
9 [label="(1, 1) CHAN_OUT : logic"];
7 [label="IN(1) INPUT : logic"];
6 [label="IN(1) INPUT : logic"];
5 [label="IN(1) INPUT : logic"];
4 [label="IN(1) INPUT : logic"];
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
20 [label="(1, 1) not"];
21 [label="(1, 1) not"];
	18 -> 19;
	16 -> 17;
	14 -> 15;
	12 -> 13;
	10 -> 11;
	8 -> 9;
	6 -> 20;
	20 -> 16;
	7 -> 21;
	21 -> 18;
}

//because:
// Vertex 19
//  has expected degree OUT 1
//  but we found degree OUT 0

Example3.sv
// LOG : Starting NetList 
digraph G {
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
4 [label="(2, 1) nand"];
	2 -> 4;
	3 -> 4;
	4 -> 1;
}

Example4.sv
// LOG : Starting NetList 
// LOG : Failure Interpreting
digraph G {
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
4 [label="(2, 1) nand"];
	2 -> 4;
	2 -> 4;
	4 -> 1;
}

//because:
// Vertex 3
//  has expected degree OUT 1
//  but we found degree OUT 0

Example5.sv
// LOG : Starting NetList 
// LOG : Failure Interpreting
digraph G {
5 [label="(1, 1) IDX [1](DOWN)"];
3 [label="IN(3) INPUT : logic[3]"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
4 [label="(2, 1) nand"];
	3 -> 5;
	2 -> 4;
	5 -> 4;
	4 -> 1;
}

//because:
// Vertex 3
//  has expected degree OUT 3
//  but we found degree OUT 1

