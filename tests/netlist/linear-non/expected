Example Non-Linearly Wired Circuits
Example1.sv
// LOG : Starting NetList 
// (Port output logic "out" (Port input logic[3] "ab" (Gate "n1" (GateB nand (Shim output (Var out)) (Shim input (Index 0 (Var ab))) (Shim input (Index 1 (Var ab)))) (Stop))))
// LOG : Parsing Successful
// (Port output logic (Port input logic[3] (Gate (GateB nand (Var 1) (Index DOWN (Var 0) 0) (Index DOWN (Var 0) 1)) Stop)))
// LOG : Type Checking Complete
// LOG : Soundness Error:
digraph G {
5 [label="(1, 1) IDX [1](DOWN)"];
4 [label="(1, 1) IDX [0](DOWN)"];
2 [label="IN(3) INPUT : logic[3]"];
1 [label="OUT(1) OUTPUT : logic"];
3 [label="(2, 1) nand"];
	2 -> 5;
	2 -> 4;
	4 -> 3;
	5 -> 3;
	3 -> 1;
}

//because:
// Vertex 2
//  has expected degree OUT 3
//  but we found degree OUT 2


Example2.sv
// LOG : Starting NetList 
// (Port inout logic[2] "out" (Port input logic "b" (Port input logic "c" (Gate "n1" (GateB nand (Shim output (Index 0 (Var out))) (Shim input (Var b)) (Shim input (Var c))) (Stop)))))
// LOG : Parsing Successful
// (Port inout logic[2] (Port input logic (Port input logic (Gate (GateB nand (Cast up (Index UP (Var 2) 0)) (Var 1) (Var 0)) Stop))))
// LOG : Type Checking Complete
// LOG : Soundness Error:
digraph G {
5 [label="(1, 1) CAST"];
6 [label="(1, 1) IDX [0](UP)"];
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="INOUT(2) INOUT : logic[2]"];
4 [label="(2, 1) nand"];
	5 -> 6;
	6 -> 1;
	2 -> 4;
	3 -> 4;
	4 -> 5;
}

//because:
// Vertex 1
//  has expected degree IN 2
//  but we found degree IN 1


Example3.sv
// LOG : Starting NetList 
// (Port output logic "out" (Port input logic[2][2] "bc" (Gate "n1" (GateB nand (Shim output (Var out)) (Shim input (Index 1 (Index 0 (Var bc)))) (Shim input (Index 0 (Index 1 (Var bc))))) (Stop))))
// LOG : Parsing Successful
// (Port output logic (Port input logic[2][2] (Gate (GateB nand (Var 1) (Index DOWN (Index DOWN (Var 0) 0) 1) (Index DOWN (Index DOWN (Var 0) 1) 0)) Stop)))
// LOG : Type Checking Complete
// LOG : Soundness Error:
digraph G {
6 [label="(1, 1) IDX [0](DOWN)"];
7 [label="(1, 1) IDX [1](DOWN)"];
4 [label="(1, 1) IDX [1](DOWN)"];
5 [label="(1, 1) IDX [0](DOWN)"];
2 [label="IN(4) INPUT : logic[2][2]"];
1 [label="OUT(1) OUTPUT : logic"];
3 [label="(2, 1) nand"];
	7 -> 6;
	2 -> 7;
	5 -> 4;
	2 -> 5;
	4 -> 3;
	6 -> 3;
	3 -> 1;
}

//because:
// Vertex 2
//  has expected degree OUT 4
//  but we found degree OUT 2


Example4.sv
// LOG : Starting NetList 
// (Port output logic "out" (Port input logic "i0" (Port input logic "i1" (Port input logic "i2" (Port input logic "i3" (Port input logic "s1" (Port input logic "s0" (Wire logic "y0" (Wire logic "y1" (Wire logic "y2" (Wire logic "y3" (Wire logic "s1n" (Wire logic "s0n" (Gate "n1" (GateU not (Shim output (Var s1n)) (Shim input (Var s1))) (Gate "n2" (GateU not (Shim output (Var s0n)) (Shim input (Var s0))) (Stop))))))))))))))))
// LOG : Parsing Successful
// (Port output logic (Port input logic (Port input logic (Port input logic (Port input logic (Port input logic (Port input logic (Wire logic (Wire logic (Wire logic (Wire logic (Wire logic (Wire logic (Gate (GateU not (Project Write (Var 1)) (Var 7)) (Gate (GateU not (Project Write (Var 1)) (Var 7)) Stop)))))))))))))))
// LOG : Type Checking Complete
// LOG : Soundness Error:
digraph G {
18 [label="(1, 1) CHAN_IN : logic"];
19 [label="(1, 1) CHAN_OUT : logic"];
16 [label="(1, 1) CHAN_IN : logic"];
17 [label="(1, 1) CHAN_OUT : logic"];
14 [label="(1, 1) CHAN_IN : logic"];
15 [label="(1, 1) CHAN_OUT : logic"];
12 [label="(1, 1) CHAN_IN : logic"];
13 [label="(1, 1) CHAN_OUT : logic"];
10 [label="(1, 1) CHAN_IN : logic"];
11 [label="(1, 1) CHAN_OUT : logic"];
8 [label="(1, 1) CHAN_IN : logic"];
9 [label="(1, 1) CHAN_OUT : logic"];
7 [label="IN(1) INPUT : logic"];
6 [label="IN(1) INPUT : logic"];
5 [label="IN(1) INPUT : logic"];
4 [label="IN(1) INPUT : logic"];
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
20 [label="(1, 1) not"];
21 [label="(1, 1) not"];
	18 -> 19;
	16 -> 17;
	14 -> 15;
	12 -> 13;
	10 -> 11;
	8 -> 9;
	6 -> 20;
	20 -> 16;
	7 -> 21;
	21 -> 18;
}

//because:
// Vertex 19
//  has expected degree OUT 1
//  but we found degree OUT 0


Example5.sv
// LOG : Starting NetList 
// (Port output logic "out" (Port input logic "left" (Port input logic "right" (Gate "n1" (GateB nand (Shim output (Var out)) (Shim input (Var left)) (Shim input (Var left))) (Stop)))))
// LOG : Parsing Successful
// (Port output logic (Port input logic (Port input logic (Gate (GateB nand (Var 2) (Var 1) (Var 1)) Stop))))
// LOG : Type Checking Complete
// LOG : Soundness Error:
digraph G {
3 [label="IN(1) INPUT : logic"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
4 [label="(2, 1) nand"];
	2 -> 4;
	2 -> 4;
	4 -> 1;
}

//because:
// Vertex 3
//  has expected degree OUT 1
//  but we found degree OUT 0


Example6.sv
// LOG : Starting NetList 
// (Port output logic "out" (Port input logic "a" (Port input logic[3] "bc" (Gate "n1" (GateB nand (Shim output (Var out)) (Shim input (Var a)) (Shim input (Index 1 (Var bc)))) (Stop)))))
// LOG : Parsing Successful
// (Port output logic (Port input logic (Port input logic[3] (Gate (GateB nand (Var 2) (Var 1) (Index DOWN (Var 0) 1)) Stop))))
// LOG : Type Checking Complete
// LOG : Soundness Error:
digraph G {
5 [label="(1, 1) IDX [1](DOWN)"];
3 [label="IN(3) INPUT : logic[3]"];
2 [label="IN(1) INPUT : logic"];
1 [label="OUT(1) OUTPUT : logic"];
4 [label="(2, 1) nand"];
	3 -> 5;
	2 -> 4;
	5 -> 4;
	4 -> 1;
}

//because:
// Vertex 3
//  has expected degree OUT 3
//  but we found degree OUT 1


